# based on https://github.com/rinongal/textual_inversion/blob/5862ea4e3500a1042595bc199cfe5335703a458e/configs/stable-diffusion/v1-finetune.yaml
model:
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    linear_start: 0.00085
    linear_end: 0.0120
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: image
    cond_stage_key: caption
    image_size: 64
    channels: 4
    cond_stage_trainable: true   # Note: different from the one we trained before
    conditioning_key: crossattn
    monitor: val/loss_simple_ema
    scale_factor: 0.18215
    use_ema: False

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 32 # unused
        in_channels: 4
        out_channels: 4
        model_channels: 320
        attention_resolutions: [ 4, 2, 1 ]
        num_res_blocks: 2
        channel_mult: [ 1, 2, 4, 4 ]
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: True
        legacy: False

    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 4
        monitor: val/rec_loss
        ddconfig:
          double_z: true
          z_channels: 4
          resolution: 512
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
          - 1
          - 2
          - 4
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      target: ldm.modules.encoders.modules.FrozenCLIPEmbedder

data:
  target: main.DataModuleFromConfig
  params:
    num_workers: 4
    wrap: false
    train:
      target: ldm.data.textcaps.TextCapsBase
      params:
        data_root: ../../data/TextCaps
        size: 512
        set: train
    val:
      target: ldm.data.textcaps.TextCapsBase
      params:
        data_root: ../../data/TextCaps
        size: 512
        set: val

deepspeed:
  # train_batch_size: 96 # total batch size across all gpus
  train_micro_batch_size_per_gpu: 8  # it's easier to max out the gpu memory if we use control per-gpu batch size
  gradient_accumulation_steps: 8
  optimizer:
    type: Adam
    params:
      lr: 1e-7
  scheduler:
    type: WarmupLR
    params:
      warmup_type: linear
      warmup_min_lr: 1e-7
      warmup_max_lr: 3.0e-04
      warmup_num_steps: 1000
  bf16:
    enabled: True
  zero_optimization:
    stage: 2
